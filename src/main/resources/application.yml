#wsl-ip: 172.23.141.84
wsl-ip: 172.24.248.215

server:
  port: 9010
  servlet:
    encoding:
      enabled: true
      charset: utf-8
      force: true
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
mybatis:
  mapper-locations: classpath:com/wusd/skeleton/mapper/**/*.xml
logging:
  level:
    root: info
    com.wusd.skeleton: debug
    org.apache.shardingsphere: debug
  config: classpath:logback-spring.xml
rocketmq:
  name-server: ${wsl-ip}:9876
  consumer:
    group: testGroup250717
    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值
    pull-batch-size: 10
  producer:
    group: testGroup250717
      # 发送消息超时时间，默认3000
    sendMessageTimeout: 10000
      # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
      # 异步消息重试此处，默认2
    retryTimesWhenSendAsyncFailed: 2
      # 消息最大长度，默认1024 * 1024 * 4(默认4M)
    maxMessageSize: 4096
      # 压缩消息阈值，默认4k(1024 * 4)
    compressMessageBodyThreshold: 4096
      # 是否在内部发送失败时重试另一个broker，默认false
    retryNextServer: false

spring:
  profiles:
    active: develop
  main:
    allow-bean-definition-overriding: true
  redis:
    host: ${wsl-ip}
    port: 6379
    database: 0
    password: Wusd123..
  shardingsphere:
    props:
      sql-show: true
      rewrite-bindings: false
    datasource:
      names: m1
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://${wsl-ip}:3306/order_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
        username: root
        password: Wusd123..
    rules:
      sharding:
        tables:
          t_order:
            actual-data-nodes: m1.t_order_$->{1..2}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: t_order_inline
            key-generate-strategy:
              column: order_id
              key-generator-name: snowflake
        sharding-algorithms:
          t_order_inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_id % 2 + 1}
        key-generators:
          snowflake:
            type: SNOWFLAKE
knife4j:
  enable: true